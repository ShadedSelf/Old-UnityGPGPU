
#pragma kernel CSMain
#include "../ComputeShaders/RayThings.hlsl"
#include "../ComputeShaders/MatrixThings.hlsl"

RWTexture2D<float4> Result;
Texture2D<float3> Noise;
SamplerState samplerNoise;

float3 eye;
float3 up;
float3 right;
float3 fw;

float3 _LightDir;
float _L;

float2 angle;

int maxSteps;
float drawDist;
float epSI;

float fwMult;
float projectionMult;

float minT;
float maxT;
float kk;

int2 pixel;
float2 uv;
int texSize;

float _Time;

float3 rd;
float3 ro;

float3 _Pos;
float3 _Size;
float _HolePC;
float3 _CrossPC;
float _BoxPC;

uint _Frame;

float smin(float a, float b, float s) {

	float h = clamp(0.5 + 0.5*(b - a) / s, 0., 1.);
	return lerp(b, a, h) - h * (1.0 - h)*s;
}

float smax(float a, float b, float s) {

	float h = clamp(0.5 + 0.5*(a - b) / s, 0., 1.);
	return lerp(b, a, h) + h * (1.0 - h)*s;
}

#define GDFVector0 vec3(1, 0, 0)
#define GDFVector1 vec3(0, 1, 0)
#define GDFVector2 vec3(0, 0, 1)

#define GDFVector3 normalize(float3(1, 1, 1 ))
#define GDFVector4 normalize(float3(-1, 1, 1))
#define GDFVector5 normalize(float3(1, -1, 1))
#define GDFVector6 normalize(float3(1, 1, -1))

#define GDFVector7 normalize(float3(0, 1, PHI+1.))
#define GDFVector8 normalize(float3(0, -1, PHI+1.))
#define GDFVector9 normalize(float3(PHI+1., 0, 1))
#define GDFVector10 normalize(float3(-PHI-1., 0, 1))
#define GDFVector11 normalize(float3(1, PHI+1., 0))
#define GDFVector12 normalize(float3(-1, PHI+1., 0))

#define GDFVector13 normalize(float3(0, PHI, 1))
#define GDFVector14 normalize(float3(0, -PHI, 1))
#define GDFVector15 normalize(float3(1, 0, PHI))
#define GDFVector16 normalize(float3(-1, 0, PHI))
#define GDFVector17 normalize(float3(PHI, 1, 0))
#define GDFVector18 normalize(float3(-PHI, 1, 0))

#define fGDFBegin float d = 0.;
#define fGDF(v) d = max(d, abs(dot(p, v)));
#define fGDFEnd return d - r;

float fDodecahedron(float3 p, float r)
{
	fGDFBegin
		fGDF(GDFVector13) fGDF(GDFVector14) fGDF(GDFVector15) fGDF(GDFVector16)
		fGDF(GDFVector17) fGDF(GDFVector18)
		fGDFEnd
}

float fIcosahedron(float3 p, float r)
{
	fGDFBegin
		fGDF(GDFVector3) fGDF(GDFVector4) fGDF(GDFVector5) fGDF(GDFVector6)
		fGDF(GDFVector7) fGDF(GDFVector8) fGDF(GDFVector9) fGDF(GDFVector10)
		fGDF(GDFVector11) fGDF(GDFVector12)
		fGDFEnd
}

float map(float3 p)
{
	/*float3 q = float3(opRep(p.x, .5), p.y, opRep(p.z, .5));
	float2 index = floor(p.xz);
	float sa = rand(index);
	float b = sdBox(q + float3(0, sa, 0), .25);*/
	float b = sdBox(p + float3(0, 5, 0), float3(100, 1, 100));
	//b = min(b, sdTorus(p.xzy - _Pos, float2(1.25, .6)));
	//b = min(b, fIcosahedron(p.xzy - _Pos, 1));
	b = min(b, fIcosahedron(p, 1));

	return b;
}

float mapO(float3 p)
{
	return fIcosahedron(p, 1);
}

float3 calcNormalO(float3 pos)
{
	float3 eps = float3(0.0001, 0.0, 0.0);
	float3 nor = float3(
		mapO(pos + eps.xyy).x - mapO(pos - eps.xyy).x,
		mapO(pos + eps.yxy).x - mapO(pos - eps.yxy).x,
		mapO(pos + eps.yyx).x - mapO(pos - eps.yyx).x);
	return normalize(nor);
}

float3 calcNormal(in float3 pos)
{
	float2 e = float2(1.0, -1.0) * 0.5773 * 0.0005;
	return normalize(e.xyy*map(pos + e.xyy) +
	e.yyx*map(pos + e.yyx) +
	e.yxy*map(pos + e.yxy) +
	e.xxx*map(pos + e.xxx));
}

float shadow(float3 ror, float3 rdr, float mint, float maxt)
{
	float h = 0;
	float t = mint;
	do
	{
		h = map(ror + rdr * t);
		t += h;
	} while (h > .001 && t < maxt);
	return (h < .001) ? 0 : 1;
}

bool raymarchW(out float3 pos)
{
	float t = 0;
	float d = 0;
	int i = 0;
	do	
	{
		d = abs(map(ro + rd * t));
		t += d * kk;
	} while (i++ < maxSteps && t < drawDist && d > epSI);

	pos = ro + rd * t;
	return (t < drawDist);
}

float3 shade(float3 p, float3 n)
{
	float3 ret = 1;

	float doter = dot(-_LightDir.xyz, n);
	ret = doter * .5 + .5;
	ret += (1 - ret) * _L;
	float s = shadow(p - _LightDir * .001 + n * .01, -_LightDir, .001, 75.0);

	s = (doter <= 0 || s < .5) ? lerp(1, .5, abs(doter)) : 1;
	ret *= s;

	ret *= (p.y < -3.5) ? (floor(p.x) % 2 == 0) ? 1 : (floor(p.z) % 2 == 0) ? .5 : 1 : 1;

	/*float2 index = floor(p.xz);
	float2 nor = (frac(p.xz) - .5) * 2;
	float sa = sin(rand(index).x * _Time) * .5 + .5;
	sa = sa - (.1 * sa);

	if (abs(nor.x) > sa || abs(nor.y) > sa)
		sa = 0;

	ret *= sa;*/

	return ret;
}

float ao(float3 p, float3 n) {
	const int steps = 5;
	float maxD = 0.7;
	float occlusion = 0.0;
	for (int i = 1; i <= steps; i++) {
		float k = float(i) / float(steps);
		k *= k;
		float t = maxD * k;
		float d = map(p + t * n);
		occlusion += pow(0.5, k * float(steps)) * (t - d);
	}
	float scale = 0.4;
	return 1.0 - saturate(scale * occlusion);
}

float ihash(int n)
{
	n = (n << 13) ^ n;
	n = (n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff;
	return (1.0 / 2147483647.0) * float(n);
}

#define vec3 float3
float fres(float n1, float n2, vec3 normal, vec3 incident)
{
	float r0 = (n1 - n2) / (n1 + n2);
	r0 *= r0;
	float cosX = -dot(normal, incident);
	if (n1 > n2)
	{
		float n = n1 / n2;
		float sinT2 = n * n*(1.0 - cosX * cosX);
		if (sinT2 > 1.0)
			return 1.0;
		cosX = sqrt(1.0 - sinT2);
	}
	float x = 1.0 - cosX;
	float ret = r0 + (1.0 - r0)*x*x*x*x*x;

	//ret = (OBJECT_REFLECTIVITY + (1.0 - OBJECT_REFLECTIVITY) * ret);
	return ret;
}

[numthreads(32, 32, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	//_Time = 0;
	pixel = id.xy;

	uv = float2((float)id.x / texSize, (float)id.y / texSize);
	float2 screen = (uv - .5) * projectionMult;

	ro = (right * screen.x + up * screen.y) + eye + fw * fwMult;
	rd = normalize(ro - eye);

	float3 temp = 0;

	float3 pos = 0;
	float3 f = 0;
	float rr = 1.0 / minT;
	float ref = 0;
	for (int i = 0; i < 30; i++)
	{
		if (raymarchW(pos))
		{
			float3 nor = calcNormal(pos);
			float eta = minT;
			if (mapO(pos) >= epSI) 
			{
				temp = shade(pos, nor) * ao(pos, nor);
				break;
			}
			if (i == 0)
			{
				f = pow(1 + dot(rd, nor), 2.5);
				float3 t = 0;
				float3 ord = rd;
				float3 oro = ro;

				ro = pos + nor * epSI * 2;
				rd = reflect(rd, nor);
				if (raymarchW(t))
				{
					ref = shade(t, calcNormal(t));
				}
				ro = oro;
				rd = ord;
			}

			bool into = dot(-rd, nor) > 0.0;
			nor = into ? nor : -nor;
			eta = into ? 1.0 / eta : eta;

			float3 n = refract(rd, nor, eta);
			ro = pos - nor * epSI * 2;
			rd = n;

			if (rd.x == 0 && rd.y == 0 && rd.z == 0)
			{
				temp = float3(0, 0, 0);
				break;
			}
		}
		else break;
	}
	//temp += f;
	temp = lerp(temp, ref, f);

	temp = pow(temp, 1. / 2.2);
	Result[id.xy] = float4(temp.xyz, 1);
}

