#pragma kernel CSMain
#include "../ComputeShaders/RayThings.hlsl"

RWTexture2D<float4> Result;
Texture2D<float3> Noise;
SamplerState samplerNoise;

float3 eye;
float3 up;
float3 right;
float3 fw;

float3 _LightDir;
float _L;

float2 angle;

int maxSteps;
float drawDist;
float epSI;

float fwMult;
float projectionMult;

float minT;
float maxT;
float kk;

int2 pixel;
float2 uv;
int texSize;

float _Time;

float3 rd;
float3 ro;

float3 _Pos;
float3 _Size;
float _HolePC;
float3 _CrossPC;
float _BoxPC;

float map(float3 p) 
{
	//p += float3(0, 0, sin(pixel.x / 30.0 * sin(_Time)) * .05);

	float c = max(sdBox(p + _Pos, _Size), -sdCross2D(p + _Pos, _Size - _HolePC));
	float cc = max(-sdCross1D(p + _Pos, _CrossPC), c);
	float ccc = max(cc, -sdBox(p + _Pos, _Size - _BoxPC));

	return ccc;

	/*float TAU = .01;
	float k = 10.0;
	float a = atan2(p.z, p.x), l = length(p.zx);
	float repa = fmod(a, TAU / k) - .5*TAU / k;     // circular domain repetition .
	p.xz = l * float2(cos(repa), sin(repa));
	p.x -= 10;*/


	//return min(ccc, sdBox(p + float3(0, 3, 0), float3(5, 1, 5)));

	//return ccc * rand(float3(pixel.xy, 1)).x;
}

float3 calcNormal(in float3 pos)
{
	/*float2 e = float2(1.0, -1.0) * 0.5773 * 0.0005;
	return normalize(e.xyy*map(pos + e.xyy) +
		e.yyx*map(pos + e.yyx) +
		e.yxy*map(pos + e.yxy) +
		e.xxx*map(pos + e.xxx));*/

	float3 eps = float3(0.0001, 0.0, 0.0);
	float3 nor = float3(
		map(pos + eps.xyy).x - map(pos - eps.xyy).x,
		map(pos + eps.yxy).x - map(pos - eps.yxy).x,
		map(pos + eps.yyx).x - map(pos - eps.yyx).x);
	return normalize(nor);
}

float getCols(float3 normal)
{
	float doter = dot(-_LightDir.xyz, normal);

	float color = doter * .5 + .5;
	return color + (1 - color) * _L;
}

float shadow(float3 ro, float3 rd, float mint, float maxt)
{
	for (float t = mint; t < maxt; )
	{
		float h = map(ro + rd * t);
		if (h < 0.001)
			return h;
		t += h;
	}
	return 1.0;
}


bool raymarch(out float4 pos)
{
	float t = 0;
	float d = 0;
	float3 p = ro + rd * t;
	for (int i = 0; i < maxSteps; ++i)
	{
		if (t > drawDist)
		{
			pos.xyz = p;
			pos.w = (float)i / maxSteps;
			return false;
		}
		p = ro + rd * t;
		d = map(p);
		if (d < epSI)
		{
			pos.xyz = p;
			pos.w = (float)i / maxSteps;
			return true;
		}
		t += d;
	}
	pos.xyz = p;
	pos.w = (float)i / maxSteps;
	return true;
}

float shade(float3 p)
{
	float ret = 1;

	float3 n = calcNormal(p);
	float s = shadow(p - _LightDir * .001 + n * .01, -_LightDir, minT, maxT);
	float doter = dot(-_LightDir.xyz, n);

	s = (doter <= 0 || s < .5) ? lerp(1, .85, abs(doter)) : 1;
	ret = getCols(n) * s;

	float3 ner = normalize(reflect(rd, n)) + (rand(p.xyz * _Time) - .5) * .1;
	ret += saturate(dot(ner, -_LightDir) * .5 + .5) / 10 * s;

	return ret;
}

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	pixel = id.xy;

	uv = float2((float)id.x / texSize, (float)id.y / texSize);

	float x = (uv.x - .5) * projectionMult;
	float y = (uv.y - .5) * projectionMult;

	ro = (right * x + up * y) + eye + fw * fwMult;
	//ro.xy += (Noise.SampleLevel(samplerNoise, float2((float)id.x / texSize, (float)id.y / texSize), 0).xy - .5) * kk;
    rd = normalize(ro - eye);

	float temp = 0;

	float4 pos = 0;
	if (raymarch(pos))
	{
		temp = shade(pos.xyz);
		//temp *= (1 - pos.w); //band

		float occ = 0.0;
		float sca = 1.0;
		float3 nor = calcNormal(pos.xyz);
		for (int i = 0; i<5; i++)
		{
			float h = 0.001 + 0.3 * i / 4.0;
			float d = map(pos.xyz + h * nor);
			occ += (h - d) * sca;
			sca *= 0.95;
		}
		temp *= saturate(1.0 - 1.5 * occ / 5);

		ro = pos.xyz + rd * 2 * max(.01, abs(map(pos.xyz)));
		rd += (Noise.SampleLevel(samplerNoise, uv, 0).xyz - .5) * .1;
		//rd += (rand(pos.xyz) - .5) * .05;
		float3 p = ro;
		float t = 0;
		float d = 0;
		for (int ii = 0; ii < 50; ++ii)
		{
			//rd += (rand(pos.xyz) - .5) * .001;
			d = -map(p);
			t += d;
			p = ro + rd * t;
			//temp = (float)ii / maxSteps;
			if (d < epSI || t > kk)
				break;
		}
		float c = saturate(distance(pos.xyz, p) / kk);
		c = pow(c, 1.35);
		temp = lerp((1 - c) + (Noise.SampleLevel(samplerNoise, uv + float2(.12432, .02342), 0).x - .5) * .2, temp, .75);
		//temp = 1 - c;

		//temp = (1 - pos.w);
	}

	/*float thing = (Noise.GatherRed(samplerNoise, float2((float)id.x / texSize, (float)id.y / texSize), 0).x - .5) * 2 * kk;
	if ((float)id.y / texSize < .5)
	{
		temp = floor(((float)id.x + thing) / (float)texSize * 10) / 9.0;
	}
	else
		temp = (float)id.x / texSize;*/

	Result[id.xy] = float4(temp.xxx, 1);
}

