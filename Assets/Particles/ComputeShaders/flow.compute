#pragma kernel Particler
#pragma kernel Clear
#pragma kernel Collision
#pragma kernel Find
#pragma kernel ApplyDelta
#pragma kernel Lamb
#pragma kernel Swap
#pragma kernel Update

#include "ComputeThings.cginc"

RWStructuredBuffer<Particle> particles;
RWStructuredBuffer<SwapData> swapBuffer;
RWStructuredBuffer<float4> np;
RWStructuredBuffer<float4> tmp;
RWStructuredBuffer<float4> color;
RWStructuredBuffer<CollisionData> collisionBuffer;
RWStructuredBuffer<Nei> neisBuffer;
RWStructuredBuffer<uint> cellCount;
RWStructuredBuffer<N> nIndices;

StructuredBuffer<Cubes> cubes;

//-- Globals: --
float deltaTime;
float particleRad;
float maxVelocity;
float time;

int particleCount;
int cubeCount;
int iterations;
int currentIteration;

float3 ext;
float3 gravity;
float3 worldSize;

int3 gridSize;

//-- Fluid: --
float rest;
float radius;
float ep;
float mK;
float mQ;
float mE;

float mapG(float3 p)
{
	return sdTorus(p, float2(3, 1));
}

float3 calcNormalG(in float3 pos)
{
	const float2 eps = float2(0.00001, 0.0);
	float3 nor = float3(
		mapG(pos + eps.xyy).x - mapG(pos - eps.xyy).x,
		mapG(pos + eps.yxy).x - mapG(pos - eps.yxy).x,
		mapG(pos + eps.yyx).x - mapG(pos - eps.yyx).x);
	return normalize(nor);
}

float map(float3 p)
{
	float d = -sdBox(p, worldSize);
	for (int i = 0; i < cubeCount; i++)
		d = min(d, sdBox(mul((float3x3)cubes[i].rot, p - cubes[i].position.xyz), cubes[i].scale.xyz + radius));
	return d;
}

float3 calcNormal(in float3 pos)
{
	const float2 eps = float2(0.00001, 0.0);
	float3 nor = float3(
		map(pos + eps.xyy).x - map(pos - eps.xyy).x,
		map(pos + eps.yxy).x - map(pos - eps.yxy).x,
		map(pos + eps.yyx).x - map(pos - eps.yyx).x);
	return normalize(nor);
}

[numthreads(32, 1, 1)]
void Particler (uint3 id : SV_DispatchThreadID)
{
	float3 vel = particles[id.x].vel;
	// if (length(vel) < 0.001) { return; }
	// vel += -calcNormalG(np[id.x].xyz) * deltaTime * length(gravity);
	vel /= 1 + length(vel) * 0.001;
	vel += gravity * 0.05;// * deltaTime;

	float3 pos = np[id.x].xyz;
	float3 np = pos + vel * deltaTime;

	//-- Sorting and insertion: --
	collisionBuffer[id.x].cell = cellFromPos(np, worldSize, gridSize);
	collisionBuffer[id.x].particleID = id.x;

	swapBuffer[id.x].particle = particles[id.x];
	swapBuffer[id.x].np.xyz = np;
}

[numthreads(32, 1, 1)]
void Swap(uint3 id : SV_DispatchThreadID)
{
	particles[id.x]	= swapBuffer[collisionBuffer[id.x].particleID].particle;
	np[id.x]		= swapBuffer[collisionBuffer[id.x].particleID].np;
	
	uint c;
	uint cell = cellFromPos(np[id.x].xyz, worldSize, gridSize);
	InterlockedAdd(cellCount[cell], 1, c);
	nIndices[cell].n[c] = id.x;

	color[id.x] = float4((np[id.x].xyz - particles[id.x].pos) / .15 * .5 + .5, 1);
}

[numthreads(32, 1, 1)]
void Lamb(uint3 id : SV_DispatchThreadID)
{
	float density = 0;
	float gradient = 0;
	float3 me = np[id.x].xyz;

	for (uint i = 0; i < neisBuffer[id.x].count; ++i)
	{
		float3 ot = np[neisBuffer[id.x].neis[i]].xyz;
		float3 grad = WS(me - ot, particleRad) / rest; // * mass
		gradient += dot(grad, grad);
		density += W(me - ot, particleRad); // * mass
	}
	if (map(me) < radius)
		density += W(me - calcNormal(me) * abs(map(me) - radius), particleRad);
	
	float l = density / rest - 1; // = 0
	// l = max(l, 0);
	float lambda = -l / (gradient + ep);
	np[id.x].w = lambda;
}

[numthreads(32, 1, 1)]
void Collision(uint3 id : SV_DispatchThreadID)
{
	float3 dp = ZERO;
	float3 fdp = ZERO;
	float4 me = np[id.x];

	for (uint i = 0; i < neisBuffer[id.x].count; ++i)
	{
		float4 ot = np[neisBuffer[id.x].neis[i]];

		float tension = pow(W(me.xyz - ot.xyz, particleRad) / W(particleRad * mQ, particleRad), mE);
		float co = -mK * ((isnan(tension)) ? 0.0 : tension);
		dp += (me.w + ot.w + co) * WS(me.xyz - ot.xyz, particleRad); // * mass
	
		// float3 grad = me.xyz - ot.xyz;
		// float d = length(grad);
		// float p = -min(d - particleRad, 0);
		// dp += grad * p;
	}
	dp /= rest;

	float3 grad = calcNormal(me.xyz);
	float d = map(me.xyz);
	float c = (0.1) - d;
	dp += normalize(grad) * max(c, 0);

	dp /= pow(currentIteration, 0.5);
	// dp /= pow((iterations + 1) - currentIteration, 0.5);
	// dp /= iterations;
	tmp[id.x].xyz = dp;
}

[numthreads(32, 1, 1)]
void ApplyDelta(uint3 id : SV_DispatchThreadID)
{
	np[id.x].xyz += tmp[id.x].xyz;
}

[numthreads(32, 1, 1)]
void Find(uint3 id : SV_DispatchThreadID)
{
	float3 me = np[id.x].xyz;
	float3 aOne = relative(me, -worldSize, worldSize);
	int3 gridTemp = clamp(floor(aOne * gridSize), 0, gridSize - 1);

	uint num = 0;
	for (int z = -1; z < 2; ++z)
	{ for (int y = -1; y < 2; ++y)
		{ for (int x = -1; x < 2; ++x)
			if (
			gridTemp.x + x > -1 && gridTemp.x + x < gridSize.x &&
			gridTemp.y + y > -1 && gridTemp.y + y < gridSize.y &&
			gridTemp.z + z > -1 && gridTemp.z + z < gridSize.z)
			{
				uint cell = fromGridToIndex((uint3)(gridTemp + int3(x, y, z)), gridSize);
				for (uint i = 0; i < cellCount[cell] && num < nn; ++i)
				{
					uint pID = nIndices[cell].n[i];
					if (distance(me, np[pID].xyz) < particleRad && id.x != pID)
					{
						neisBuffer[id.x].neis[num] = pID;
						num++;
					}
				}
			}
		}
	}

	neisBuffer[id.x].count = num;
}

[numthreads(32, 1, 1)]
void Update(uint3 id : SV_DispatchThreadID)
{
	particles[id.x].vel = (np[id.x].xyz - particles[id.x].pos) / deltaTime;
	particles[id.x].pos = np[id.x].xyz;
}

[numthreads(32, 1, 1)]
void Clear(uint3 id : SV_DispatchThreadID)
{
	cellCount[id.x] = 0;
}
