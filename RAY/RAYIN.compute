#pragma kernel CSMain
#include "RayThings.cginc"
#include "MatrixThings.cginc"

RWTexture2D<float> Result;
Texture2D<float3> Noise;
SamplerState samplerNoise;

float3 eye;
float3 up;
float3 right;
float3 fw;

float3 _LightDir;
float _L;

float2 angle;

int maxSteps;
float drawDist;
float epSI;

float fwMult;
float projectionMult;

float minT;
float maxT;
float kk;

int2 pixel;
float2 uv;
int texSize;

float _Time;
int _Frame;

float3 rd;
float3 ro;

float3 _Pos;
float3 _Size;
float _HolePC;
float3 _CrossPC;
float _BoxPC;

float3 cosineDirection(in float seed, in float3 nor)
{
	float u = rand(78.233 + seed);
	float v = rand(10.873 + seed);

	float a = 6.2831853 * v;
	u = 2.0 * u - 1.0;
	return normalize(nor + float3(sqrt(1.0 - u * u) * float2(cos(a), sin(a)), u));
}

float length_p(float3 v, float p)
{
	float3 a = abs(v);
	if (p > 50.0) {
		return max(a.x, max(a.y, a.z));
	}
	else {
		return pow(pow(a.x, p) + pow(a.y, p) + pow(a.z, p), 1.0 / p);
	}

}

float sdSphere0(float3 p, float s)
{
	return length_p(p, 1) - s;
}

float  doubleplane(float3 p, float3 origin, float3 normal) {
	return max(dot(p - origin, normal), dot(-p - origin, normal));
}

float  plane(float3 p, float3 origin, float3 normal) {
	return dot(p - origin, normal);
}

float tetrahedron(float3 p, float d) {
	float dn = 1.0 / sqrt(3.0);

	float sd1 = plane(p, float3(d, d, d), float3(-dn, dn, dn));
	float sd2 = plane(p, float3(d, -d, -d), float3(dn, -dn, dn));
	float sd3 = plane(p, float3(-d, d, -d), float3(dn, dn, -dn));
	float sd4 = plane(p, float3(-d, -d, d), float3(-dn, -dn, -dn));

	return max(max(sd1, sd2), max(sd3, sd4));
}

float octahedron(float3 p, float d) {

	float mv = tetrahedron(p, d);
	float mv2 = tetrahedron(-p, d);

	return min(mv, mv2);
}

float inter(float d1, float d2)
{
	if (d1 > d2)
		return d1;
	return d2;

}

float octahedronT(float3 p, float d) {

	float mv = tetrahedron(p, d);
	float mv2 = tetrahedron(-p, d);

	return inter(mv, mv2);
}

float icosahedron(float3 p, float d) {

	float h = 1.0 / sqrt(3.0);

	float3 v1 = h * float3(1.0, 1.0, 1.0);
	float3 v2 = h * float3(-1.0, 1.0, 1.0);
	float3 v3 = h * float3(-1.0, 1.0, -1.0);
	float3 v4 = h * float3(1.0, 1.0, -1.0);

	float3 v5 = h * float3(0.0, INV_PHI, PHI);
	float3 v6 = h * float3(0.0, INV_PHI, -PHI);

	float ds = doubleplane(p, d*v1, v1);

	ds = max(doubleplane(p, d*v2, v2), ds);
	ds = max(doubleplane(p, d*v3, v3), ds);
	ds = max(doubleplane(p, d*v4, v4), ds);
	ds = max(doubleplane(p, d*v5, v5), ds);
	ds = max(doubleplane(p, d*v6, v6), ds);

	ds = max(doubleplane(p, d*v5.zxy, v5.zxy), ds);
	ds = max(doubleplane(p, d*v5.yzx, v5.yzx), ds);
	ds = max(doubleplane(p, d*v6.zxy, v6.zxy), ds);
	ds = max(doubleplane(p, d*v6.yzx, v6.yzx), ds);

	return ds;
}


#define GDFVector3 normalize(float3(1, 1, 1 ))
#define GDFVector4 normalize(float3(-1, 1, 1))
#define GDFVector5 normalize(float3(1, -1, 1))
#define GDFVector6 normalize(float3(1, 1, -1))

#define GDFVector7 normalize(float3(0, 1, PHI+1.))
#define GDFVector8 normalize(float3(0, -1, PHI+1.))
#define GDFVector9 normalize(float3(PHI+1., 0, 1))
#define GDFVector10 normalize(float3(-PHI-1., 0, 1))
#define GDFVector11 normalize(float3(1, PHI+1., 0))
#define GDFVector12 normalize(float3(-1, PHI+1., 0))

#define GDFVector13 normalize(float3(0, PHI, 1))
#define GDFVector14 normalize(float3(0, -PHI, 1))
#define GDFVector15 normalize(float3(1, 0, PHI))
#define GDFVector16 normalize(float3(-1, 0, PHI))
#define GDFVector17 normalize(float3(PHI, 1, 0))
#define GDFVector18 normalize(float3(-PHI, 1, 0))

#define fGDFBegin float d = 0.;
#define fGDF(v) d = max(d, abs(dot(p, v)));
#define fGDFEnd return d - r;

float fDodecahedron(float3 p, float r)
{
	fGDFBegin
		fGDF(GDFVector13) fGDF(GDFVector14) fGDF(GDFVector15) fGDF(GDFVector16)
		fGDF(GDFVector17) fGDF(GDFVector18)
		fGDFEnd
}

float fIcosahedron(float3 p, float r)
{
	fGDFBegin
		fGDF(GDFVector3) fGDF(GDFVector4) fGDF(GDFVector5) fGDF(GDFVector6)
		fGDF(GDFVector7) fGDF(GDFVector8) fGDF(GDFVector9) fGDF(GDFVector10)
		fGDF(GDFVector11) fGDF(GDFVector12)
		fGDFEnd
}

float map(float3 p)
{
	float s = fIcosahedron(p + float3(2, 3, 0), 1);
	//s = min(s, octahedronT(p + float3(-2, 3, 3), 1));
	s = min(s, octahedron(p + float3(-2, 3, 0), 1));
	float m = sdBox(p, float3(5, 5, 5));
	m = max(m, -sdBox(p + float3(0, 0, 1), float3(4, 4, 5)));
	m = max(m, -sdBox(p - float3(0, 0, 0), float3(2, .5, 4.5)));
	m = max(m, -sdBox(p - float3(0, 0, 0), float3(.5, 2, 4.5)));
	m = max(m, -sdBox(p - float3(0, 0, -3), float3(4.5, .5, 4.5)));
	//return m;

	return min(s, m);
}

float2 miner(float2 a, float2 b) 
{
	if (a.x < b.x) return a;
	return b;
}
float2 mapTerial(float3 p)
{
	float2 i = float2(fIcosahedron(p + float3(2, 3, 0), 1), .1);
	float2 o = float2(octahedron(p + float3(-2, 3, 0), 1), 4);
	return miner(i, o);
}

float3 calcNormal(in float3 pos)
{
	float2 e = float2(1.0, -1.0) * 0.5773 * 0.0005;
	return normalize(e.xyy*map(pos + e.xyy) +
	e.yyx*map(pos + e.yyx) +
	e.yxy*map(pos + e.yxy) +
	e.xxx*map(pos + e.xxx));
}

float shadow(float3 ror, float3 rdr, float mint, float maxt)
{
	float h = 0;
	float t = mint;
	do
	{
		h = map(ror + rdr * t);
		t += h;
	} while (h > .001 && t < maxt);
	return (h < .001) ? 0 : 1;
}

bool raymarchW(out float4 pos)
{
	float t = 0;
	float d = 0;
	int i = 0;
	do
	{
		d = map(ro + rd * t);
		t += d;
	} while (i++ < maxSteps && t < drawDist && d > epSI);

	pos.xyz = ro + rd * t;;
	pos.w = (float)i / maxSteps;
	return (t < drawDist);
}

float ihash(int n)
{
	n = (n << 13) ^ n;
	n = (n * (n * n * 15731 + 789221) + 1376312589) & 0x7fffffff;
	return (1.0 / 2147483647.0) * float(n);
}

[numthreads(32, 32, 1)]
void CSMain(uint3 id : SV_DispatchThreadID)
{
	//_Time = 1110;
	//_Frame = 1110;
	pixel = id.xy;

	uv = float2((float)id.x / texSize, (float)id.y / texSize);
	float2 screen = (uv - .5) * projectionMult;

	ro = (right * screen.x + up * screen.y) + eye + fw * fwMult;
	rd = normalize(ro - eye);
	rd += (rand(float3(uv, ro.x) * _Time) - .5) * .001;

	float temp = 0;

	float4 pos = 0;
	//float sa = rand(dot(uv, float2(12.9898, 78.233)) * _Time);
	float sa = ihash(id.x + 1920U * id.y + (1920U * 1080U)*uint(_Frame));
	int i = 0;
	bool march = raymarchW(pos);
	float3 nor = 0;
	float3 opos = pos.xyz;
	[unroll(3)]
	while (march)
	{
		if (pos.y > 3.99 && pos.x > -3 && pos.x < 3 && pos.z > -3 && pos.z < 3)
		{
			if (i == 0) {temp = 1; break;}
			float2 m = mapTerial(opos);
			temp += kk * (( m.x <= epSI) ? m.y : 1);
		}
		if (i == 2) break;

		nor = calcNormal(pos.xyz);
		rd = cosineDirection(76.2 + 73.1*float(i) + sa + 17.7*float(_Frame), nor);
		ro = pos.xyz + rd * .005;
		epSI *= 1.5;
		i++;
		march = raymarchW(pos);
	}

	temp = pow(temp, 1. / 2.2);
	temp = lerp(Result[id.xy], temp, 1.0 / (float)(_Frame + 1));

	Result[id.xy] = temp;
}

