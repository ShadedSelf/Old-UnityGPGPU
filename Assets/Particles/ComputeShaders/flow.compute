#pragma kernel Particler
#pragma kernel Clear
#pragma kernel Collision
#pragma kernel Find
#pragma kernel ApplyDelta
#pragma kernel Lamb
#pragma kernel Swap
#pragma kernel Update
#pragma kernel Curl

#include "ComputeThings.cginc"
#include "Random.hlsl"


//-- Particles: --
RWStructuredBuffer<Particle> particles;
RWStructuredBuffer<float4> np;
RWStructuredBuffer<float4> tmp;
RWStructuredBuffer<float4> curls;
RWStructuredBuffer<float4> color;

//-- Neighbouring: --
RWStructuredBuffer<SwapData> swapBuffer;
RWStructuredBuffer<CollisionData> collisionBuffer;
RWStructuredBuffer<Nei> neisBuffer;
RWStructuredBuffer<uint> cellCount;
RWStructuredBuffer<N> nIndices;

StructuredBuffer<Cubes> cubes;

//-- Globals: --
float deltaTime;
float particleRad;
float maxVelocity;
float time;
uint frame;

int particleCount;
int cubeCount;
int iterations;
int currentIteration;

float3 ext;
float3 gravity;
float3 worldSize;

int3 gridSize;

//-- Fluid: --
float rest;
float radius;
float ep;
float mK;
float mQ;
float mE;

//-- Gravity: --
float mapG(float3 p)
{
	return sdTorus(p, float2(3, 1));
}

float3 calcNormalG(in float3 pos)
{
	const float2 eps = float2(0.00001, 0.0);
	float3 nor = float3(
		mapG(pos + eps.xyy).x - mapG(pos - eps.xyy).x,
		mapG(pos + eps.yxy).x - mapG(pos - eps.yxy).x,
		mapG(pos + eps.yyx).x - mapG(pos - eps.yyx).x);
	return normalize(nor);
}

float map(float3 p)
{
	float d = -sdBox(p, worldSize);
	for (int i = 0; i < cubeCount; i++)
		d = min(d, sdBox(mul((float3x3)cubes[i].rot, p - cubes[i].position.xyz), cubes[i].scale.xyz + radius));
	return d;
}

float3 calcNormal(in float3 pos)
{
	const float2 eps = float2(0.00001, 0.0);
	float3 nor = float3(
		map(pos + eps.xyy).x - map(pos - eps.xyy).x,
		map(pos + eps.yxy).x - map(pos - eps.yxy).x,
		map(pos + eps.yyx).x - map(pos - eps.yyx).x);
	return normalize(nor);
}
//-------------

//-- Test: --
float getMass(int flag)
{
	return (flag == 0) ? 1 : 1;
}
float3 getNormal(int flag)
{
	return (flag == 0) ? float3(0, -1, 0) : float3(0, -1, 0);
}
//-----------

[numthreads(32, 1, 1)]
void Particler (uint3 id : SV_DispatchThreadID)
{
	// iSeed = fromGridToIndex(id, gridSize) * frame * 999999; // Global seed
	
	// if (rand() < 0.002)
	// {
	// 	particles[id.x].pos = normalize((rand3() * 2 - 1)) * 0.5 + float3(0, 1, 1);
	// 	particles[id.x].vel = 0;
	// 	np[id.x].xyz = particles[id.x].pos;
	// }

	float3 vel = particles[id.x].vel;

	// float3 n = 0;
	// float mc = curls[id.x];
	// for (uint i = 0; i < neisBuffer[id.x].count; ++i)
	// {
	// 	uint oID = neisBuffer[id.x].neis[i];
	// 	Particle me = particles[id.x];
	// 	Particle ot = particles[oID];

	// 	n += length(curls[oID].xyz) * WS(me.pos - ot.pos, particleRad) * (getMass(particles[oID].flag) / getMass(particles[id.x].flag));
		
	// 	vel += 0.000001 * (particles[oID].vel - vel) * (W(me.pos - ot.pos, particleRad) * (getMass(particles[oID].flag) / getMass(particles[id.x].flag)));
	// }
	// n = (length(n) > 0) ? normalize(n) : 0;
	// vel += 0.000065 * cross(n, curls[id.x].xyz);
	// // vel += curls[id.x].xyz * 0.00001;



	// if (length(vel) < 0.001) { return; }
	// vel += -calcNormalG(np[id.x].xyz) * deltaTime * length(gravity);
	// vel /= 1 + length(vel) * 0.001;
	vel += getNormal(particles[id.x].flag) * length(gravity) * 0.05;// * deltaTime;

	float3 pos = np[id.x].xyz;
	float3 np = pos + vel * deltaTime;

	//-- Sorting and insertion: --
	collisionBuffer[id.x].cell = cellFromPos(np, worldSize, gridSize);
	collisionBuffer[id.x].particleID = id.x;

	swapBuffer[id.x].particle = particles[id.x];
	swapBuffer[id.x].np.xyz = np;
}

[numthreads(32, 1, 1)]
void Swap(uint3 id : SV_DispatchThreadID)
{
	particles[id.x]	= swapBuffer[collisionBuffer[id.x].particleID].particle;
	np[id.x]		= swapBuffer[collisionBuffer[id.x].particleID].np;
	
	uint c;
	uint cell = cellFromPos(np[id.x].xyz, worldSize, gridSize);
	InterlockedAdd(cellCount[cell], 1, c);
	nIndices[cell].n[c] = id.x;

	float3 vel = particles[id.x].vel;
	color[id.x] = float4(vel * 0.1 + 0.5, 1);
	if (particles[id.x].flag == 1)
	{
		color[id.x] = 1 - color[id.x];
		color[id.x] *= 0.3;
	}
}

[numthreads(32, 1, 1)]
void Lamb(uint3 id : SV_DispatchThreadID)
{
	float density = 0;
	float3 gradient = 0;
	float3 me = np[id.x].xyz;

	for (uint i = 0; i < neisBuffer[id.x].count; ++i)
	{
		uint oID = neisBuffer[id.x].neis[i];

		float3 ot = np[oID].xyz;
		gradient += WS(me - ot, particleRad) * (getMass(particles[oID].flag)) / rest;
		density += W(me - ot, particleRad) * (getMass(particles[oID].flag));
	}

	// if (map(me) < radius)
		// density += W(me - calcNormal(me) * abs(map(me) - radius), particleRad) * 80000;

	// density += (me.x < -worldSize.x + particleRad || me.x > worldSize.x - particleRad) ? 100 : 0;
	// density += (me.y < -worldSize.y + particleRad || me.y > worldSize.y - particleRad) ? 100 : 0;
	// density += (me.z < -worldSize.z + particleRad || me.z > worldSize.z - particleRad) ? 100 : 0;
	
	float l = (density / rest) - 1; // = 0
	float lambda = -l / (dot(gradient, gradient) + ep);
	np[id.x].w = lambda;
	// color[id.x] = 1 - l;
}

[numthreads(32, 1, 1)]
void Collision(uint3 id : SV_DispatchThreadID)
{
	float3 dp = ZERO;
	float3 fdp = ZERO;
	float4 me = np[id.x];

	for (uint i = 0; i < neisBuffer[id.x].count; ++i)
	{
		uint oID = neisBuffer[id.x].neis[i];
		float4 ot = np[oID];

		float tension = pow(W(me.xyz - ot.xyz, particleRad) / W(particleRad * mQ, particleRad), mE);
		float co = -mK * ((isnan(tension)) ? 0.0 : tension);
		dp += (me.w + ot.w + co) * WS(me.xyz - ot.xyz, particleRad) * (getMass(particles[oID].flag) / getMass(particles[id.x].flag)); // * mass
	}
	dp /= rest;

	float3 grad = calcNormal(me.xyz);
	float d = map(me.xyz);
	float c = (radius) - d;
	dp += normalize(grad) * max(c, 0);

	dp /= pow(currentIteration, 0.5);
	tmp[id.x].xyz = dp;
}

[numthreads(32, 1, 1)]
void ApplyDelta(uint3 id : SV_DispatchThreadID)
{
	np[id.x].xyz += tmp[id.x].xyz;
}

[numthreads(32, 1, 1)]
void Find(uint3 id : SV_DispatchThreadID)
{
	float3 me = np[id.x].xyz;
	float3 aOne = relative(me, -worldSize, worldSize);
	int3 gridTemp = clamp(floor(aOne * gridSize), 0, gridSize - 1);

	uint num = 0;
	for (int z = -1; z < 2; ++z)
	{ for (int y = -1; y < 2; ++y)
		{ for (int x = -1; x < 2; ++x)
			if (
			gridTemp.x + x > -1 && gridTemp.x + x < gridSize.x &&
			gridTemp.y + y > -1 && gridTemp.y + y < gridSize.y &&
			gridTemp.z + z > -1 && gridTemp.z + z < gridSize.z)
			{
				uint cell = fromGridToIndex((uint3)(gridTemp + int3(x, y, z)), gridSize);
				for (uint i = 0; i < cellCount[cell] && num < nn; ++i)
				{
					uint pID = nIndices[cell].n[i];
					if (distance(me, np[pID].xyz) < particleRad && id.x != pID)
					{
						neisBuffer[id.x].neis[num] = pID;
						num++;
					}
				}
			}
		}
	}
	neisBuffer[id.x].count = num;
}

[numthreads(32, 1, 1)]
void Update(uint3 id : SV_DispatchThreadID)
{
	particles[id.x].vel = (np[id.x].xyz - particles[id.x].pos) / deltaTime;
	particles[id.x].pos = np[id.x].xyz;
}

[numthreads(32, 1, 1)]
void Curl(uint3 id : SV_DispatchThreadID)
{
	float3 curl = 0;
	for (uint i = 0; i < neisBuffer[id.x].count; ++i)
	{
		uint oID = neisBuffer[id.x].neis[i];
		Particle me = particles[id.x];
		Particle ot = particles[oID];

		float3 u = me.vel - ot.vel;
		float3 v = WS(ot.pos - me.pos, particleRad);
		curl += cross(u, v);
	}
	curls[id.x].xyz = curl;
}

[numthreads(32, 1, 1)]
void Clear(uint3 id : SV_DispatchThreadID)
{
	cellCount[id.x] = 0;
}
