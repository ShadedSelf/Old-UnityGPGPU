#pragma kernel CSMain
#include "../ComputeShaders/RayThings.hlsl"

RWTexture2D<float4> Result;
Texture2D<float3> Noise;
SamplerState samplerNoise;

float3 eye;
float3 up;
float3 right;
float3 fw;

float3 _LightDir;
float _L;

float2 angle;

int maxSteps;
float drawDist;
float epSI;

float fwMult;
float projectionMult;

float minT;
float maxT;
float kk;

int2 pixel;
float2 uv;
int texSize;

float _Time;

float3 rd;
float3 ro;

float3 _Pos;
float3 _Size;
float _HolePC;
float3 _CrossPC;
float _BoxPC;

float map(float3 p) 
{
	//p += float3(0, 0, sin(pixel.x / 30.0 * sin(_Time)) * .05);

	float c = max(sdBox(p + _Pos, _Size), -sdCross2D(p + _Pos, _Size - _HolePC));
	float cc = max(-sdCross1D(p + _Pos, _CrossPC), c);
	float ccc = max(cc, -sdBox(p + _Pos, _Size - _BoxPC));

	return ccc;
}

float3 calcNormal(in float3 pos)
{
	float3 eps = float3(0.00001, 0.0, 0.0);
	float3 nor = float3(
		map(pos + eps.xyy).x - map(pos - eps.xyy).x,
		map(pos + eps.yxy).x - map(pos - eps.yxy).x,
		map(pos + eps.yyx).x - map(pos - eps.yyx).x);
	return normalize(nor);
}


float shadow(float3 ro, float3 rd, float mint, float maxt)
{
	for (float t = mint; t < maxt; )
	{
		float h = map(ro + rd * t);
		if (h < 0.001)
			return h;
		t += h;
	}
	return 1.0;
}


bool raymarch(out float3 pos)
{
	float t = 0;
	float d = 100;
	for (int i = 0; i < maxSteps && d > epSI && t < drawDist; i++)
	{
		d = map(ro + rd * t);
		t += abs(d);
	}
	pos = ro + rd * t;
	return (t < drawDist);
}

float shade(float3 p)
{
	float doter = dot(-_LightDir.xyz, calcNormal(p));

	float color = doter * .5 + .5;
	return color + (1 - color) * _L;
}

[numthreads(32,32,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
	pixel = id.xy;

	uv = float2((float)id.x / texSize, (float)id.y / texSize);

	float x = (uv.x - .5) * projectionMult;
	float y = (uv.y - .5) * projectionMult;

	ro = (right * x + up * y) + eye + fw * fwMult;
	//ro.xy += (Noise.SampleLevel(samplerNoise, float2((float)id.x / texSize, (float)id.y / texSize), 0).xy - .5) * kk;
    rd = normalize(ro - eye);

	float tmp = 0;

	float3 pos = 0;
	if (raymarch(pos))
	{
		float3 pos0 = 0;
		ro = pos + (rd + 0.001);
		if (raymarch(pos0))
		{
			float3 pos1 = 0;
			ro = pos0 + (rd + 0.001);
			if (raymarch(pos1))
				tmp = shade(pos1.xyz);
			else
				tmp = shade(pos0.xyz);

			// float e =  1 - _HolePC - 0.01;
			// if (pos.y > e && pos0.y > e)
			// 	tmp = shade(pos.xyz);
		}
		else
			tmp = shade(pos.xyz);
	}

	Result[id.xy] = float4(tmp.xxx, 1);
}

